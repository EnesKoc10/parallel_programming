package com.mycompany.parallel_programing;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;

public class MainFrame extends javax.swing.JFrame {
    
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Model 1:");

        jLabel2.setText("Model 2:");

        jLabel3.setText("Model 3:");

        jLabel4.setText("Model 4:");

        jButton1.setText("Doğrulukları Göster");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel5.setText("Thread Durum");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addGap(186, 186, 186)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        jLabel7.setText(String.valueOf(accuracyList.get(0)));
        jLabel9.setText(String.valueOf(accuracyList.get(1)));
        jLabel6.setText(String.valueOf(accuracyList.get(2)));
        jLabel8.setText(String.valueOf(accuracyList.get(3)));   
    }                                        
    
    private static final List<Double> accuracyList = new ArrayList<>();
    
    private static void addAccuracy(Future<Double> accuracy) throws ExecutionException, InterruptedException {
        if (accuracy != null) {
            accuracyList.add(accuracy.get());
        } 
    }
    
    public static void main(String args[]) throws InterruptedException, FileNotFoundException, IOException, ExecutionException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);    
            }
        });  
        
        // Dosya okuma
        BufferedReader comment1_br = new BufferedReader(new FileReader("C:\\Users\\seros\\Desktop\\parallel_programing\\parallel_programing\\src\\main\\java\\com\\mycompany\\parallel_programing\\comment1.csv"));
        BufferedReader comment2_br = new BufferedReader(new FileReader("C:\\Users\\seros\\Desktop\\parallel_programing\\parallel_programing\\src\\main\\java\\com\\mycompany\\parallel_programing\\comment2.csv"));
        BufferedReader comment3_br = new BufferedReader(new FileReader("C:\\Users\\seros\\Desktop\\parallel_programing\\parallel_programing\\src\\main\\java\\com\\mycompany\\parallel_programing\\comment3.csv"));
        BufferedReader comment4_br = new BufferedReader(new FileReader("C:\\Users\\seros\\Desktop\\parallel_programing\\parallel_programing\\src\\main\\java\\com\\mycompany\\parallel_programing\\comment4.csv"));
        
        BufferedReader label1_br = new BufferedReader(new FileReader("C:\\Users\\seros\\Desktop\\parallel_programing\\parallel_programing\\src\\main\\java\\com\\mycompany\\parallel_programing\\label1.csv"));
        BufferedReader label2_br = new BufferedReader(new FileReader("C:\\Users\\seros\\Desktop\\parallel_programing\\parallel_programing\\src\\main\\java\\com\\mycompany\\parallel_programing\\label2.csv"));
        BufferedReader label3_br = new BufferedReader(new FileReader("C:\\Users\\seros\\Desktop\\parallel_programing\\parallel_programing\\src\\main\\java\\com\\mycompany\\parallel_programing\\label3.csv"));
        BufferedReader label4_br = new BufferedReader(new FileReader("C:\\Users\\seros\\Desktop\\parallel_programing\\parallel_programing\\src\\main\\java\\com\\mycompany\\parallel_programing\\label4.csv"));
        
        ArrayList<String> comment1 = new ArrayList<>();
        ArrayList<String> comment2 = new ArrayList<>();
        ArrayList<String> comment3 = new ArrayList<>();
        ArrayList<String> comment4 = new ArrayList<>();
        
        ArrayList<Integer> label1 = new ArrayList<>();
        ArrayList<Integer> label2 = new ArrayList<>();
        ArrayList<Integer> label3 = new ArrayList<>();
        ArrayList<Integer> label4 = new ArrayList<>();
        
        // Dosyadaki yorumları ve etiketleri arrayliste'e atama
        String line;
        while ((line = comment1_br.readLine()) != null) {
                line = line.trim();
                comment1.add(line);
            }
        comment1_br.close();
        
        while ((line = comment2_br.readLine()) != null) {
                line = line.trim();
                comment2.add(line);
            }
        comment2_br.close();
        
        while ((line = comment3_br.readLine()) != null) {
                line = line.trim();
                comment3.add(line);
            }
        comment3_br.close();
        
        while ((line = comment4_br.readLine()) != null) {
                line = line.trim();
                comment4.add(line);
            }
        comment4_br.close();
        
         while ((line = label1_br.readLine()) != null) {
                line = line.trim();
                int numara = Integer.parseInt(line);
                label1.add(numara);
            }
         
        label1_br.close();
        
        while ((line = label2_br.readLine()) != null) {
                line = line.trim();
                int numara = Integer.parseInt(line);
                label2.add(numara);
            }
         
        label2_br.close();
        
        while ((line = label3_br.readLine()) != null) {
                line = line.trim();
                int numara = Integer.parseInt(line);
                label3.add(numara);
            }
         
        label3_br.close();
        
        while ((line = label4_br.readLine()) != null) {
                line = line.trim();
                int numara = Integer.parseInt(line);
                label4.add(numara);
            }
         
        label4_br.close();
       
        // Nesnelerin oluşturulması
        Tokenize tokenize = new Tokenize();
        convertTfidf tf = new convertTfidf();
        NeuralNetwork nn = new NeuralNetwork();
        
        // ExecutorService oluşturuluyor
        ExecutorService executorService  = Executors.newFixedThreadPool(4); // 4 iş parçacığı
        
        // İşlem için Future nesneleri
        Future<Double> accuracy1 = executorService.submit(() -> {
            long threadId = Thread.currentThread().getId();
            jTextArea1.append("Thread " + threadId + " - Tokenization işlemi başladı\n");
            ArrayList<ArrayList<String>> tokenizedData = tokenize.preprocessing(comment1);
            jTextArea1.append("Thread " + threadId + " - Tokenization işlemi bitti\n");
            
            jTextArea1.append("Thread " + threadId + " - TF-IDF hesaplaması başladı\n");
            // tokenizationResult.get() burada kullanılıyor, tokenization tamamlandığında çalışacak
            ArrayList<ArrayList<Double>> tfidfResult = tf.CalculateTFIDF(tokenizedData); 
            jTextArea1.append("Thread " + threadId + " - TF-IDF hesaplaması bitti\n");
            
            // Sinir ağını eğitiyoruz
            double accuracy = nn.createNeuralNetwork(tfidfResult, label1);
            return accuracy;
            });
        
        Future<Double> accuracy2 = executorService.submit(() -> {
            long threadId = Thread.currentThread().getId();
            jTextArea1.append("Thread " + threadId + " - Tokenization işlemi başladı\n");
            ArrayList<ArrayList<String>> tokenizedData = tokenize.preprocessing(comment2);
            jTextArea1.append("Thread " + threadId + " - Tokenization işlemi bitti\n");
            
            jTextArea1.append("Thread " + threadId + " - TF-IDF hesaplaması başladı\n");
            // tokenizationResult.get() burada kullanılıyor, tokenization tamamlandığında çalışacak
            ArrayList<ArrayList<Double>> tfidfResult = tf.CalculateTFIDF(tokenizedData); 
            jTextArea1.append("Thread " + threadId + " - TF-IDF hesaplaması bitti\n");
            
            // Sinir ağını eğitiyoruz
            double accuracy = nn.createNeuralNetwork(tfidfResult, label2);
            return accuracy;
            });
        
        Future<Double> accuracy3 = executorService.submit(() -> {
            long threadId = Thread.currentThread().getId();
            jTextArea1.append("Thread " + threadId + " - Tokenization işlemi başladı\n");
            ArrayList<ArrayList<String>> tokenizedData = tokenize.preprocessing(comment3);
            jTextArea1.append("Thread " + threadId + " - Tokenization işlemi bitti\n");
            
            jTextArea1.append("Thread " + threadId + " - TF-IDF hesaplaması başladı\n");
            // tokenizationResult.get() burada kullanılıyor, tokenization tamamlandığında çalışacak
            ArrayList<ArrayList<Double>> tfidfResult = tf.CalculateTFIDF(tokenizedData); 
            jTextArea1.append("Thread " + threadId + " - TF-IDF hesaplaması bitti\n");
            
            // Sinir ağını eğitiyoruz
            double accuracy = nn.createNeuralNetwork(tfidfResult, label3);
            return accuracy;
            });
        
        Future<Double> accuracy4 = executorService.submit(() -> {
            long threadId = Thread.currentThread().getId();
            jTextArea1.append("Thread " + threadId + " - Tokenization işlemi başladı\n");
            ArrayList<ArrayList<String>> tokenizedData = tokenize.preprocessing(comment4);
            jTextArea1.append("Thread " + threadId + " - Tokenization işlemi bitti\n");
            
            jTextArea1.append("Thread " + threadId + " - TF-IDF hesaplaması başladı\n");
            // tokenizationResult.get() burada kullanılıyor, tokenization tamamlandığında çalışacak
            ArrayList<ArrayList<Double>> tfidfResult = tf.CalculateTFIDF(tokenizedData); 
            jTextArea1.append("Thread " + threadId + " - TF-IDF hesaplaması bitti\n");
            
            // Sinir ağını eğitiyoruz
            double accuracy = nn.createNeuralNetwork(tfidfResult, label4);
            return accuracy;
            });
        
        // Future<Double> değişkenlerinin değerlerini al ve listeye ekle 
        addAccuracy(accuracy1); 
        addAccuracy(accuracy2); 
        addAccuracy(accuracy3);
        addAccuracy(accuracy4);
        
        // ExecutorService kapatılıyor
        executorService.shutdown();
      
        // MultiThreading ile pararel progamlama
        /*Thread t1 = new Thread(() -> {
            try {
                
                process(comment1, label1, tokenize, tf, nn);   
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });*/
        /*Thread t2 = new Thread(() -> {
            try {
                process(comment2, label2, tokenize, tf, nn);
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        Thread t3 = new Thread(() -> {
            try {
                process(comment3, label3, tokenize, tf, nn);
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        Thread t4 = new Thread(() -> {
            try {
                process(comment4, label4, tokenize, tf, nn);
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });*/
        
        // Thread'leri başlatma
        /*t1.start();
        jTextArea1.append("Thread1 başladı\n");*/
        /*t2.start();
        jTextArea1.append("Thread2 başladı\n");
        t3.start();
        jTextArea1.append("Thread3 başladı\n");
        t4.start();
        jTextArea1.append("Thread4 başladı\n");*/

        // Ana thread diğer thread'lerin tamamlanmasını bekler
        //t1.join();
        //jTextArea1.append("Thread1 bitti\n");
        /*t2.join();
        jTextArea1.append("Thread2 bitti\n");
        t3.join();
        jTextArea1.append("Thread3 bitti\n");
        t4.join();
        jTextArea1.append("Thread4 bitti\n");*/
    }
    
    /*public static void process(ArrayList<String> cumleler, ArrayList<Integer> label, Tokenize tokenize, convertTfidf tf, NeuralNetwork nn) throws Exception {
        
        // Tokenization işlemi
        ArrayList<ArrayList<String>> tokenizedData = tokenize.preprocessing(cumleler); // Tokenize işlemi

        // TF-IDF hesaplaması
        ArrayList<ArrayList<Double>> tfidfResult = tf.CalculateTFIDF(tokenizedData); // TF-IDF hesaplaması

        // Sinir ağını eğitiyoruz
        double accuracy = nn.createNeuralNetwork(tfidfResult, label);
        accuracyList.add(accuracy);
        
    }*/
    
    
    // Variables declaration - do not modify                     
    private static javax.swing.JButton jButton1;
    private static javax.swing.JLabel jLabel1;
    private static javax.swing.JLabel jLabel2;
    private static javax.swing.JLabel jLabel3;
    private static javax.swing.JLabel jLabel4;
    private static javax.swing.JLabel jLabel5;
    private static javax.swing.JLabel jLabel6;
    private static javax.swing.JLabel jLabel7;
    private static javax.swing.JLabel jLabel8;
    private static javax.swing.JLabel jLabel9;
    private static javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea jTextArea1;
    // End of variables declaration                   
}
